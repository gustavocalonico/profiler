{"version":3,"sources":["ui/components/header/header.styles.tsx","ui/components/header/header.component.tsx","ui/components/profile-thumb/profile-thumb.styles.tsx","ui/components/profile-thumb/profile-thumb.component.tsx","ui/components/footer/footer.styles.tsx","ui/components/footer/footer.component.tsx","modules/search/components/search-results/search-results.styles.tsx","modules/search/components/search-results/search-results.component.tsx","utils/notification.ts","api.ts","metadata/constants.ts","modules/search/search.services.ts","modules/search/search.hooks.tsx","metadata/queries.ts","modules/search/search.styles.tsx","modules/search/search.page.tsx","modules/search/search.module.tsx","modules/profile/profile.services.ts","modules/profile/profile.hooks.tsx","modules/profile/profile.helpers.ts","modules/profile/profile.styles.tsx","modules/profile/components/languages/languages.styles.tsx","modules/profile/components/languages/languages.component.tsx","modules/profile/components/notes/notes.styles.tsx","modules/profile/components/notes/notes.component.tsx","modules/profile/components/profile-header/profile-header.styles.tsx","modules/profile/components/profile-header/profile-header.component.tsx","modules/profile/profile.page.tsx","modules/profile/profile.module.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AntHeader","Layout","Header","AntSearch","Input","Search","styled","Title","AntdTypography","Container","a","GithubOutlined","AntdGithubOutlined","HeaderComponent","onSearch","href","rel","style","fontSize","level","color","placeholder","allowClear","Card","AntdCard","Avatar","AntdAvatar","ProfileThumbComponent","profile","to","login","title","src","avatar_url","size","xs","sm","md","lg","xl","xxl","AntdFooter","Footer","CustomFooter","background","target","Date","getFullYear","Empty","AntdEmpty","div","SearchResults","profiles","length","description","grid","gutter","dataSource","renderItem","item","Item","errorNotification","errorObject","message","errorMessage","status","mesage","data","notification","error","githubApi","axios","create","baseURL","rawApi","searchValue","pageSize","url","searchUrl","get","response","items","useSearchProfile","searchString","useQuery","searchProfiles","onError","err","isLoading","AntContent","Content","CustomSpin","Spin","SearchPage","useState","setSearch","e","SearchComponent","exact","path","component","userName","useGetProfile","getUserProfile","undefined","useGetLangs","getUserRepos","repoData","langs","useMemo","repos","forEach","repo","push","language","uniqueLangs","filter","elem","index","self","indexOf","repoCount","map","uniLang","lang","percentages","totalRepos","reduce","prev","current","langRepoCount","percentage","measureLanguages","Typography","Text","List","AntdList","Languages","repoText","value","precision","valueStyle","suffix","toString","Button","AntdButton","TextArea","Notes","profileName","isModalVisible","setIsModalVisible","inputValue","setInputValue","notes","localStorage","getItem","onClick","EditOutlined","visible","onOk","setItem","onCancel","rows","defaultValue","onChange","HeaderSection","MiniText","ProfileHeader","name","bio","blog","TeamOutlined","followers","EnvironmentOutlined","location","CodeOutlined","public_repos","LinkOutlined","ProfileComponent","userLogin","useParams","isLoadingProfile","repos_url","isLoadingLangs","ProfileModule","queryClient","QueryClient","App","basename","process","QueryClientProvider","client","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8370cc24.chunk.js","sourcesContent":["import styled from 'styled-components'\nimport {\n    Layout,\n    Input,\n    Typography as AntdTypography,\n    Button as AntdButton,\n} from 'antd'\nimport { GithubOutlined as AntdGithubOutlined } from '@ant-design/icons'\n\nconst { Header: AntHeader } = Layout\nconst { Search: AntSearch } = Input\n\nexport const Header = styled(AntHeader)`\n    display: flex;\n    width: 100%;\n    height: 8vh;\n    justify-content: space-between;\n`\n\nexport const Search = styled(AntSearch)`\n    margin-top: auto;\n    margin-bottom: auto;\n    width: 250px;\n`\nexport const Title = styled(AntdTypography.Title)`\n    margin-top: 6px;\n    @media only screen and (max-width: 600px) {\n        display: none;\n    }\n`\n\nexport const Container = styled.a`\n    display: flex;\n    margin-top: auto;\n    margin-bottom: auto;\n`\n\nexport const GithubOutlined = styled(AntdGithubOutlined)`\n    margin-right: 20px;\n    margin-top: 5px;\n    font-size: 32;\n    color: #ffff;\n`\n","import React from 'react'\nimport {\n    Container,\n    GithubOutlined,\n    Header,\n    Search,\n    Title,\n} from './header.styles'\n\ninterface HeaderComponentProps {\n    onSearch?: (value: string) => void\n}\n\nconst HeaderComponent: React.FC<HeaderComponentProps> = ({ onSearch }) => {\n    return (\n        <Header>\n            <Container href=\"/\" rel=\"noreferrer\">\n                <GithubOutlined style={{ fontSize: 24 }} />\n                <Title level={5} style={{ color: '#ffff' }}>\n                    Github Profiler\n                </Title>\n            </Container>\n            {onSearch ? (\n                <Search\n                    placeholder=\"User name\"\n                    allowClear\n                    onSearch={onSearch}\n                />\n            ) : (\n                <></>\n            )}\n        </Header>\n    )\n}\n\nexport default HeaderComponent\n","import styled from 'styled-components'\nimport { Card as AntdCard, Avatar as AntdAvatar } from 'antd'\n\nexport const Card = styled(AntdCard)`\n    width: 100%;\n    :hover {\n        cursor: pointer;\n    }\n`\n\nexport const Avatar = styled(AntdAvatar)`\n    margin: 10px;\n`\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { IProfileSearchUI } from '../../../metadata/profile'\nimport { Avatar, Card } from './profile-thumb.styles'\n\ninterface IProfileThumbComponentProps {\n    profile: IProfileSearchUI\n}\n\nconst ProfileThumbComponent: React.FC<IProfileThumbComponentProps> = ({\n    profile,\n}) => {\n    return (\n        <Link to={`/${profile.login}`}>\n            <Card title={profile.login}>\n                <Avatar\n                    src={profile.avatar_url}\n                    size={{ xs: 24, sm: 32, md: 40, lg: 64, xl: 80, xxl: 100 }}\n                />\n            </Card>\n        </Link>\n    )\n}\n\nexport default ProfileThumbComponent\n","import styled from 'styled-components'\nimport { Layout } from 'antd'\n\nconst { Footer: AntdFooter } = Layout\n\nexport const CustomFooter = styled(AntdFooter)`\n    margin: auto;\n    justify-content: center;\n    display: flex;\n`\n","import React from 'react'\nimport { Typography } from 'antd'\nimport { CustomFooter } from './footer.styles'\n\nconst Footer: React.FC = () => {\n    return (\n        <CustomFooter style={{ background: '#ffff' }}>\n            <Typography>\n                {'Made with ♥, coffe, and '}\n                <a href=\"https://ant.design/\" target=\"_blank\" rel=\"noreferrer\">\n                    Ant Design\n                </a>\n                {', '}\n                {new Date().getFullYear()}.\n            </Typography>\n        </CustomFooter>\n    )\n}\n\nexport default Footer\n","import styled from 'styled-components'\nimport { Empty as AntdEmpty } from 'antd'\n\nexport const Empty = styled(AntdEmpty)``\n\nexport const Container = styled.div`\n    margin-right: 10vw;\n    margin-left: 10vw;\n    margin-top: 6vh;\n    margin-bottom: 2vh;\n    width: 100%;\n`\n","import { List } from 'antd'\nimport React from 'react'\nimport { IProfileSearchUI } from '../../../../metadata/profile'\nimport ProfileThumbComponent from '../../../../ui/components/profile-thumb'\nimport { Container, Empty } from './search-results.styles'\n\ninterface ISearchResultsProps {\n    profiles: IProfileSearchUI[]\n}\n\nconst SearchResults: React.FC<ISearchResultsProps> = ({ profiles }) => {\n    return (\n        <>\n            {profiles.length === 0 ? (\n                <Empty\n                    description={<span>Try searching for a Github user!</span>}\n                />\n            ) : (\n                <Container>\n                    <List\n                        grid={{\n                            gutter: 20,\n                            xs: 1,\n                            sm: 1,\n                            md: 3,\n                            lg: 3,\n                            xl: 3,\n                            xxl: 3,\n                        }}\n                        dataSource={profiles}\n                        renderItem={(item) => (\n                            <List.Item>\n                                <ProfileThumbComponent profile={item} />\n                            </List.Item>\n                        )}\n                    />\n                </Container>\n            )}\n        </>\n    )\n}\n\nexport default SearchResults\n","import { notification } from 'antd'\n\nexport const errorNotification = (\n    errorObject?: any,\n    message?: string\n): void => {\n    let errorMessage = ''\n    if (errorObject) {\n        if (errorObject.status >= 500) {\n            errorMessage = errorObject.mesage || errorObject.data?.message\n            notification.error({\n                message: errorMessage,\n            })\n            return\n        }\n\n        if (errorObject.status === 404) {\n            notification.error({\n                message: 'Resource not found',\n            })\n            return\n        }\n    }\n\n    if (typeof errorObject === 'string') {\n        errorMessage = errorObject\n    }\n\n    notification.error({\n        message: message || errorMessage,\n    })\n}\n","import axios from 'axios'\nimport { GITHUB_API } from './metadata/constants'\n\nexport const githubApi = axios.create({\n    baseURL: GITHUB_API,\n})\n\nexport const rawApi = axios.create()\n","export const GITHUB_API = 'https://api.github.com/'\n","import { githubApi } from '../../api'\nimport { IProfileSearch } from '../../metadata/profile'\n\nexport async function searchProfiles(\n    searchValue?: string | null,\n    pageSize = 30\n): Promise<IProfileSearch[]> {\n    const url = '/search/users'\n    const searchUrl = searchValue\n        ? `?per_page=${pageSize}&page=1&q=${searchValue}`\n        : ''\n    const response = await githubApi.get(url + searchUrl, {})\n    return response.data.items\n}\n","import { useQuery } from 'react-query'\nimport { IProfileSearchUI } from '../../metadata/profile'\nimport { GET_SEARCH_USERS } from '../../metadata/queries'\nimport { errorNotification } from '../../utils/notification'\nimport { searchProfiles } from './search.services'\n\ninterface ISearchProfileReturn {\n    isLoading: boolean\n    profiles: IProfileSearchUI[]\n}\n\nexport const useSearchProfile = (\n    searchString?: string\n): ISearchProfileReturn => {\n    const { isLoading, data } = useQuery<IProfileSearchUI[]>(\n        [GET_SEARCH_USERS, searchString],\n        () => (searchString ? searchProfiles(searchString) : []),\n        {\n            onError: (err: any) => {\n                errorNotification(err)\n            },\n        }\n    )\n\n    return {\n        isLoading,\n        profiles: (data as IProfileSearchUI[]) || [],\n    }\n}\n","export const GET_SEARCH_USERS = 'GET_SEARCH_USERS'\nexport const GET_USER_PROFILE = 'GET_USER_PROFILE'\nexport const GET_USER_REPOS = 'GET_USER_REPOS'\n","import styled from 'styled-components'\nimport { Layout, Spin } from 'antd'\n\nconst { Content: AntContent } = Layout\n\nexport const Content = styled(AntContent)`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    height: 100%;\n    min-height: 83vh;\n    width: 100%;\n    padding-right: 25vw;\n    padding-left: 25vw;\n    padding-top: 9vh;\n    padding-bottom: 9vh;\n    @media only screen and (max-width: 1200px) {\n        padding-right: 15vw;\n        padding-left: 15vw;\n        padding-top: 9vh;\n        padding-bottom: 9vh;\n    }\n    @media only screen and (max-width: 768px) {\n        padding-right: 10vw;\n        padding-left: 10vw;\n        padding-top: 9vh;\n        padding-bottom: 9vh;\n    }\n    @media only screen and (max-width: 600px) {\n        padding-right: 5vw;\n        padding-left: 5vw;\n        padding-top: 3vh;\n        padding-bottom: 3vh;\n    }\n`\n\nexport const CustomSpin = styled(Spin)`\n    margin: auto;\n    margin-top: 32vh;\n`\n\nexport const SearchValuesContainer = styled.div`\n    display: flex;\n    justify-content: center;\n`\n","import React, { useState } from 'react'\nimport { Footer, HeaderComponent } from '../../ui/components'\nimport SearchResults from './components/search-results'\nimport { useSearchProfile } from './search.hooks'\nimport { Content, CustomSpin } from './search.styles'\n\nconst SearchPage: React.FC = () => {\n    const [searchValue, setSearch] = useState<string>('')\n    const { isLoading, profiles } = useSearchProfile(searchValue)\n\n    return (\n        <>\n            <HeaderComponent onSearch={(e: string) => setSearch(e)} />\n            <Content>\n                {isLoading ? (\n                    <CustomSpin size=\"large\" />\n                ) : (\n                    <SearchResults profiles={profiles} />\n                )}\n            </Content>\n            <Footer />\n        </>\n    )\n}\n\nexport default SearchPage\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport SearchPage from './search.page'\n\nconst SearchComponent: React.FC = () => {\n    return (\n        <Switch>\n            <Route exact path=\"/\" component={SearchPage} />\n        </Switch>\n    )\n}\n\nexport default SearchComponent\n","import { githubApi, rawApi } from '../../api'\nimport { IProfileUI } from '../../metadata/profile'\nimport { IRepoUI } from '../../metadata/repos'\n\nexport async function getUserProfile(\n    userName?: string | null\n): Promise<IProfileUI> {\n    const url = '/users'\n    const searchUrl = userName ? `/${userName}` : ''\n    const response = await githubApi.get(url + searchUrl, {})\n\n    return response.data\n}\n\nexport async function getUserRepos(url?: string): Promise<IRepoUI[]> {\n    if (url) {\n        const response = await rawApi.get(url, {})\n        return response.data\n    }\n    return []\n}\n","import { useCallback, useMemo, useState } from 'react'\nimport { useQuery } from 'react-query'\nimport { IProfileUI } from '../../metadata/profile'\nimport { GET_USER_PROFILE, GET_USER_REPOS } from '../../metadata/queries'\nimport { IRepo, IRepoUI } from '../../metadata/repos'\nimport { IStatusUI } from '../../metadata/status'\nimport { errorNotification } from '../../utils/notification'\nimport { measureLanguages } from './profile.helpers'\nimport { getUserProfile, getUserRepos } from './profile.services'\n\ninterface IGetProfileReturn {\n    isLoading: boolean\n    profile?: IProfileUI\n}\n\nexport const useGetProfile = (userName?: string): IGetProfileReturn => {\n    const { isLoading, data: profileData } = useQuery<IProfileUI>(\n        [GET_USER_PROFILE, userName],\n        () => getUserProfile(userName),\n        {\n            onError: (err: any) => {\n                errorNotification(err)\n            },\n        }\n    )\n\n    return {\n        isLoading,\n        profile: (profileData as IProfileUI) || undefined,\n    }\n}\n\ninterface IGetLangsReturn {\n    isLoading: boolean\n    langs?: IStatusUI[]\n}\n\nexport const useGetLangs = (url?: string): IGetLangsReturn => {\n    const { isLoading, data: repoData } = useQuery<IRepoUI[]>(\n        [GET_USER_REPOS, url],\n        () => getUserRepos(url),\n        {\n            onError: (err: any) => {\n                errorNotification(err)\n            },\n        }\n    )\n\n    const status = useMemo(() => {\n        if (repoData) return measureLanguages(repoData)\n        return undefined\n    }, [repoData])\n\n    return {\n        isLoading,\n        langs: status,\n    }\n}\n","import { IRepoUI } from '../../metadata/repos'\nimport { IStatusUI } from '../../metadata/status'\n\nexport const measureLanguages = (repos: IRepoUI[]): IStatusUI[] => {\n    // Get all repositories languages\n    const langs: string[] = []\n    repos.forEach((repo) => {\n        langs.push(repo.language)\n    })\n\n    // Make the languages unique\n    const uniqueLangs = langs.filter((elem, index, self) => {\n        return index === self.indexOf(elem)\n    })\n\n    // Make an array with same lenght of unique langs\n    // Count which langs matches the unique\n    const repoCount: number[] = uniqueLangs.map(() => 0)\n    uniqueLangs.forEach((uniLang, index) => {\n        langs.forEach((lang) => {\n            if (lang === uniLang) repoCount[index] += 1\n        })\n    })\n\n    // Calcualte percentages of langs and repositories\n    const percentages: number[] = repoCount.map(() => 0)\n    const totalRepos = repoCount.reduce((prev, current) => prev + current, 0)\n    repoCount.forEach((item, index) => {\n        percentages[index] = item / totalRepos\n    })\n\n    // Merge the arrays\n    const merged: IStatusUI[] = uniqueLangs.map((item, index) => ({\n        language: item,\n        langRepoCount: repoCount[index],\n        percentage: percentages[index],\n    }))\n\n    return merged\n}\n","import styled from 'styled-components'\nimport { Layout, Spin, Typography, Empty as AntdEmpty } from 'antd'\n\nconst { Content: AntContent } = Layout\n\nexport const Content = styled(AntContent)`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    height: 100%;\n    min-height: 83vh;\n    width: 100%;\n    padding-right: 25vw;\n    padding-left: 25vw;\n    padding-top: 9vh;\n    padding-bottom: 9vh;\n    @media only screen and (max-width: 1200px) {\n        padding-right: 15vw;\n        padding-left: 15vw;\n        padding-top: 9vh;\n        padding-bottom: 9vh;\n    }\n    @media only screen and (max-width: 768px) {\n        padding-right: 10vw;\n        padding-left: 10vw;\n        padding-top: 9vh;\n        padding-bottom: 9vh;\n    }\n    @media only screen and (max-width: 600px) {\n        padding-right: 5vw;\n        padding-left: 5vw;\n        padding-top: 3vh;\n        padding-bottom: 3vh;\n    }\n`\n\nexport const Title = styled(Typography.Title)``\n\nexport const Text = styled(Typography.Text)``\n\nexport const MiniText = styled(Typography.Text)`\n    padding-left: 10px;\n`\n\nexport const CustomSpin = styled(Spin)`\n    margin: auto;\n    margin-top: 40vh;\n`\n\nexport const Empty = styled(AntdEmpty)`\n    margin: auto;\n    margin-top: 40vh;\n`\n","import { Typography, Card as AntdCard, List as AntdList } from 'antd'\nimport styled from 'styled-components'\n\nexport const Container = styled.div`\n    margin-right: 10vw;\n    margin-left: 10vw;\n    margin-top: 6vh;\n    margin-bottom: 2vh;\n`\n\nexport const Text = styled(Typography.Text)``\n\nexport const Card = styled(AntdCard)`\n    margin: 10px;\n`\n\nexport const List = styled(AntdList)`\n    @media only screen and (min-width: 768px) {\n        min-width: 20vw;\n        max-width: 100vw;\n    }\n`\n","import { Statistic } from 'antd'\nimport React from 'react'\nimport { IStatusUI } from '../../../../metadata/status'\nimport { Text, Card, List } from './languages.styles'\n\ninterface ILanguagesProps {\n    status: IStatusUI[]\n}\n\nconst Languages: React.FC<ILanguagesProps> = ({ status }) => {\n    return (\n        <List\n            grid={{\n                gutter: 20,\n                xs: 1,\n                sm: 1,\n                md: 2,\n                lg: 3,\n                xl: 3,\n                xxl: 3,\n            }}\n            dataSource={status}\n            renderItem={(item: any) => {\n                const percentage = item.percentage ? item.percentage * 100 : '%'\n                const repoText: string =\n                    item.langRepoCount && item.langRepoCount > 1\n                        ? ' repositories'\n                        : ' repository'\n\n                return (\n                    <Card>\n                        <List.Item>\n                            <Statistic\n                                title={item.language}\n                                value={percentage}\n                                precision={2}\n                                valueStyle={{ color: '#3f8600' }}\n                                suffix=\"%\"\n                            />\n                            <Text>\n                                {item.langRepoCount.toString() + repoText}\n                            </Text>\n                        </List.Item>\n                    </Card>\n                )\n            }}\n        />\n    )\n}\n\nexport default Languages\n","import styled from 'styled-components'\nimport { Button as AntdButton } from 'antd'\n\nexport const Button = styled(AntdButton)``\n","import React, { useState } from 'react'\nimport { Input, Modal } from 'antd'\nimport { EditOutlined } from '@ant-design/icons'\nimport { Button } from './notes.styles'\n\nconst { TextArea } = Input\n\ninterface INotesProps {\n    profileName: string\n}\n\nconst Notes: React.FC<INotesProps> = ({ profileName }) => {\n    const [isModalVisible, setIsModalVisible] = useState(false)\n    const [inputValue, setInputValue] = useState<string>('')\n\n    const notes = localStorage.getItem(profileName)\n\n    const handleChange = (e: any): void => {\n        const { value } = e.target\n        setInputValue(value)\n    }\n\n    const showModal = (): void => {\n        setIsModalVisible(true)\n    }\n\n    const handleOk = (): void => {\n        localStorage.setItem(profileName, inputValue)\n        setIsModalVisible(false)\n    }\n\n    const handleCancel = (): void => {\n        setIsModalVisible(false)\n    }\n\n    return (\n        <>\n            <Button onClick={showModal}>\n                Notes <EditOutlined />\n            </Button>\n            <Modal\n                title={`${profileName} notes`}\n                visible={isModalVisible}\n                onOk={handleOk}\n                onCancel={handleCancel}\n            >\n                <TextArea\n                    rows={5}\n                    defaultValue={notes || ''}\n                    onChange={handleChange}\n                />\n            </Modal>\n        </>\n    )\n}\n\nexport default Notes\n","import styled from 'styled-components'\nimport {\n    Spin,\n    Avatar as AntdAvatar,\n    Typography,\n    Empty as AntdEmpty,\n} from 'antd'\n\nexport const Header = styled.div`\n    display: flex;\n    margin-bottom: 1vh;\n\n    @media only screen and (max-width: 768px) {\n        display: block;\n    }\n`\nexport const HeaderSection = styled.div`\n    padding: 20px;\n    padding-left: 0;\n`\n\nexport const Avatar = styled(AntdAvatar)`\n    margin: 20px;\n    @media only screen and (max-width: 768px) {\n        margin: auto;\n        margin-right: 15vw;\n        margin-left: 15vw;\n    }\n`\n\nexport const Title = styled(Typography.Title)``\n\nexport const Text = styled(Typography.Text)``\n\nexport const MiniText = styled(Typography.Text)`\n    padding-left: 10px;\n`\n\nexport const CustomSpin = styled(Spin)`\n    margin: auto;\n    margin-top: 32vh;\n`\n\nexport const Empty = styled(AntdEmpty)`\n    margin-top: 32vh;\n`\n","import {\n    CodeOutlined,\n    EnvironmentOutlined,\n    GithubOutlined,\n    LinkOutlined,\n    TeamOutlined,\n} from '@ant-design/icons'\nimport React from 'react'\nimport { IProfileUI } from '../../../../metadata/profile'\nimport Notes from '../notes'\nimport {\n    Avatar,\n    Header,\n    HeaderSection,\n    Title,\n    Text,\n    MiniText,\n} from './profile-header.styles'\n\ninterface IProfileHeaderProps {\n    profile: IProfileUI\n}\n\nconst ProfileHeader: React.FC<IProfileHeaderProps> = ({ profile }) => {\n    return (\n        <Header>\n            <Avatar\n                src={profile.avatar_url}\n                size={{ xs: 192, sm: 192, md: 192, lg: 192, xl: 240, xxl: 240 }}\n            />\n            <HeaderSection>\n                <Title>{profile.name}</Title>\n                <Text>{profile.bio}</Text>\n                <HeaderSection>\n                    <div>\n                        <GithubOutlined />\n                        <a\n                            href={profile ? profile?.blog : ''}\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <MiniText>{`@${profile.login}`}</MiniText>\n                        </a>\n                    </div>\n                    <div>\n                        <TeamOutlined />\n                        <MiniText>{`${profile.followers} followers`}</MiniText>\n                    </div>\n                    <div>\n                        <EnvironmentOutlined />\n                        <MiniText>{profile.location}</MiniText>\n                    </div>\n                    <div>\n                        <CodeOutlined />\n                        <MiniText>\n                            {`${profile.public_repos} repositories`}\n                        </MiniText>\n                    </div>\n                    {profile?.blog ? (\n                        <div>\n                            <LinkOutlined />\n                            <a\n                                href={profile ? profile?.blog : ''}\n                                target=\"_blank\"\n                                rel=\"noreferrer\"\n                            >\n                                <MiniText>\n                                    {profile.blog.length > 30\n                                        ? 'blog'\n                                        : profile.blog}\n                                </MiniText>\n                            </a>\n                        </div>\n                    ) : (\n                        <></>\n                    )}\n                </HeaderSection>\n\n                <div>\n                    <Notes profileName={profile.login} />\n                </div>\n            </HeaderSection>\n        </Header>\n    )\n}\n\nexport default ProfileHeader\n","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport { Footer, HeaderComponent } from '../../ui/components'\nimport { useGetLangs, useGetProfile } from './profile.hooks'\nimport { Content, Empty, CustomSpin } from './profile.styles'\nimport { ProfileHeader, Languages } from './components'\n\nconst ProfileComponent: React.FC = () => {\n    const { userLogin } = useParams() as { userLogin: string }\n    const { isLoading: isLoadingProfile, profile } = useGetProfile(userLogin)\n    const { isLoading: isLoadingLangs, langs } = useGetLangs(profile?.repos_url)\n\n    if (isLoadingProfile || isLoadingLangs) {\n        return (\n            <>\n                <HeaderComponent />\n                <Content>\n                    <CustomSpin size=\"large\" />\n                </Content>\n                <Footer />\n            </>\n        )\n    }\n\n    return (\n        <>\n            <HeaderComponent />\n            {!profile || !langs ? (\n                <Content>\n                    <Empty description={<span>User not found!</span>} />\n                </Content>\n            ) : (\n                <Content>\n                    <ProfileHeader profile={profile} />\n                    <Languages status={langs} />\n                </Content>\n            )}\n            <Footer />\n        </>\n    )\n}\n\nexport default ProfileComponent\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport ProfileComponent from './profile.page'\n\nconst ProfileModule: React.FC = () => {\n    return (\n        <Switch>\n            <Route exact path=\"/:userLogin\" component={ProfileComponent} />\n        </Switch>\n    )\n}\n\nexport default ProfileModule\n","import React from 'react'\nimport { QueryClient, QueryClientProvider } from 'react-query'\nimport { BrowserRouter } from 'react-router-dom'\nimport { ProfileModule, SearchModule } from './modules'\n\nconst queryClient = new QueryClient()\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <QueryClientProvider client={queryClient}>\n                <SearchModule />\n                <ProfileModule />\n            </QueryClientProvider>\n        </BrowserRouter>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry)\n                getFID(onPerfEntry)\n                getFCP(onPerfEntry)\n                getLCP(onPerfEntry)\n                getTTFB(onPerfEntry)\n            }\n        )\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}